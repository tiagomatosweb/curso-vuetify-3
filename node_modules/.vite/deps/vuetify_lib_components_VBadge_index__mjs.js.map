{
  "version": 3,
  "sources": ["../../vuetify/src/components/VBadge/VBadge.tsx"],
  "sourcesContent": ["// Styles\nimport './VBadge.sass'\n\n// Components\nimport { VIcon } from '@/components/VIcon'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { makeLocationProps, useLocation } from '@/composables/location'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, useTheme } from '@/composables/theme'\nimport { makeTransitionProps, MaybeTransition } from '@/composables/transition'\nimport { useBackgroundColor, useTextColor } from '@/composables/color'\nimport { useLocale } from '@/composables/locale'\n\n// Utilities\nimport { genericComponent, pick, useRender } from '@/util'\nimport { toRef } from 'vue'\n\n// Types\nimport type { MakeSlots } from '@/util'\n\nexport type VBadgeSlots = MakeSlots<{\n  default: []\n  badge: []\n}>\n\nexport const VBadge = genericComponent<VBadgeSlots>()({\n  name: 'VBadge',\n\n  inheritAttrs: false,\n\n  props: {\n    bordered: Boolean,\n    color: String,\n    content: [Number, String],\n    dot: Boolean,\n    floating: Boolean,\n    icon: IconValue,\n    inline: Boolean,\n    label: {\n      type: String,\n      default: '$vuetify.badge',\n    },\n    max: [Number, String],\n    modelValue: {\n      type: Boolean,\n      default: true,\n    },\n    offsetX: [Number, String],\n    offsetY: [Number, String],\n    textColor: String,\n\n    ...makeLocationProps({ location: 'top end' } as const),\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n    ...makeTransitionProps({ transition: 'scale-rotate-transition' }),\n  },\n\n  setup (props, ctx) {\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(toRef(props, 'color'))\n    const { roundedClasses } = useRounded(props)\n    const { t } = useLocale()\n    const { textColorClasses, textColorStyles } = useTextColor(toRef(props, 'textColor'))\n    const { themeClasses } = useTheme()\n\n    const { locationStyles } = useLocation(props, true, side => {\n      const base = props.floating\n        ? (props.dot ? 2 : 4)\n        : (props.dot ? 8 : 12)\n\n      return base + (\n        ['top', 'bottom'].includes(side) ? +(props.offsetY ?? 0)\n        : ['left', 'right'].includes(side) ? +(props.offsetX ?? 0)\n        : 0\n      )\n    })\n\n    useRender(() => {\n      const value = Number(props.content)\n      const content = (!props.max || isNaN(value)) ? props.content\n        : value <= props.max ? value\n        : `${props.max}+`\n\n      const [badgeAttrs, attrs] = pick(ctx.attrs as Record<string, any>, [\n        'aria-atomic',\n        'aria-label',\n        'aria-live',\n        'role',\n        'title',\n      ])\n\n      return (\n        <props.tag\n          class={[\n            'v-badge',\n            {\n              'v-badge--bordered': props.bordered,\n              'v-badge--dot': props.dot,\n              'v-badge--floating': props.floating,\n              'v-badge--inline': props.inline,\n            },\n          ]}\n          { ...attrs }\n        >\n          <div class=\"v-badge__wrapper\">\n            { ctx.slots.default?.() }\n\n            <MaybeTransition transition={ props.transition }>\n              <span\n                v-show={ props.modelValue }\n                class={[\n                  'v-badge__badge',\n                  themeClasses.value,\n                  backgroundColorClasses.value,\n                  roundedClasses.value,\n                  textColorClasses.value,\n                ]}\n                style={[\n                  backgroundColorStyles.value,\n                  textColorStyles.value,\n                  props.inline ? {} : locationStyles.value,\n                ]}\n                aria-atomic=\"true\"\n                aria-label={ t(props.label, value) }\n                aria-live=\"polite\"\n                role=\"status\"\n                { ...badgeAttrs }\n              >\n                {\n                  props.dot ? undefined\n                  : ctx.slots.badge ? ctx.slots.badge?.()\n                  : props.icon ? <VIcon icon={ props.icon } />\n                  : content\n                }\n              </span>\n            </MaybeTransition>\n          </div>\n        </props.tag>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VBadge = InstanceType<typeof VBadge>\n"],
  "mappings": "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",
  "names": ["VBadge", "genericComponent", "name", "inheritAttrs", "props", "bordered", "Boolean", "color", "String", "content", "Number", "dot", "floating", "icon", "IconValue", "inline", "label", "type", "default", "max", "modelValue", "offsetX", "offsetY", "textColor", "makeLocationProps", "location", "makeRoundedProps", "makeTagProps", "makeThemeProps", "makeTransitionProps", "transition", "setup", "ctx", "backgroundColorClasses", "backgroundColorStyles", "useBackgroundColor", "toRef", "roundedClasses", "useRounded", "t", "useLocale", "textColorClasses", "textColorStyles", "useTextColor", "themeClasses", "useTheme", "locationStyles", "useLocation", "side", "base", "includes", "useRender", "value", "isNaN", "badgeAttrs", "attrs", "pick", "slots", "undefined", "badge"]
}
