{
  "version": 3,
  "sources": ["../../vuetify/src/components/VProgressLinear/VProgressLinear.tsx", "../../vuetify/src/composables/intersectionObserver.ts", "../../vuetify/src/composables/loader.tsx"],
  "sourcesContent": ["// Styles\nimport './VProgressLinear.sass'\n\n// Composables\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeLocationProps, useLocation } from '@/composables/location'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useBackgroundColor, useTextColor } from '@/composables/color'\nimport { useIntersectionObserver } from '@/composables/intersectionObserver'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useRtl } from '@/composables/locale'\n\n// Utilities\nimport { computed, Transition } from 'vue'\nimport { convertToUnit, genericComponent, useRender } from '@/util'\n\ntype VProgressLinearSlots = {\n  default: [{ value: number, buffer: number }]\n}\n\nexport const VProgressLinear = genericComponent<VProgressLinearSlots>()({\n  name: 'VProgressLinear',\n\n  props: {\n    absolute: Boolean,\n    active: {\n      type: Boolean,\n      default: true,\n    },\n    bgColor: String,\n    bgOpacity: [Number, String],\n    bufferValue: {\n      type: [Number, String],\n      default: 0,\n    },\n    clickable: Boolean,\n    color: String,\n    height: {\n      type: [Number, String],\n      default: 4,\n    },\n    indeterminate: Boolean,\n    max: {\n      type: [Number, String],\n      default: 100,\n    },\n    modelValue: {\n      type: [Number, String],\n      default: 0,\n    },\n    reverse: Boolean,\n    stream: Boolean,\n    striped: Boolean,\n    roundedBar: Boolean,\n\n    ...makeLocationProps({ location: 'top' } as const),\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n  },\n\n  emits: {\n    'update:modelValue': (value: number) => true,\n  },\n\n  setup (props, { slots }) {\n    const progress = useProxiedModel(props, 'modelValue')\n    const { isRtl } = useRtl()\n    const { themeClasses } = provideTheme(props)\n    const { locationStyles } = useLocation(props)\n    const { textColorClasses, textColorStyles } = useTextColor(props, 'color')\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(computed(() => props.bgColor || props.color))\n    const { backgroundColorClasses: barColorClasses, backgroundColorStyles: barColorStyles } = useBackgroundColor(props, 'color')\n    const { roundedClasses } = useRounded(props)\n    const { intersectionRef, isIntersecting } = useIntersectionObserver()\n\n    const max = computed(() => parseInt(props.max, 10))\n    const height = computed(() => parseInt(props.height, 10))\n    const normalizedBuffer = computed(() => parseFloat(props.bufferValue) / max.value * 100)\n    const normalizedValue = computed(() => parseFloat(progress.value) / max.value * 100)\n    const isReversed = computed(() => isRtl.value !== props.reverse)\n    const transition = computed(() => props.indeterminate ? 'fade-transition' : 'slide-x-transition')\n    const opacity = computed(() => {\n      return props.bgOpacity == null\n        ? props.bgOpacity\n        : parseFloat(props.bgOpacity)\n    })\n\n    function handleClick (e: MouseEvent) {\n      if (!intersectionRef.value) return\n\n      const { left, right, width } = intersectionRef.value.getBoundingClientRect()\n      const value = isReversed.value ? (width - e.clientX) + (right - width) : e.clientX - left\n\n      progress.value = Math.round(value / width * max.value)\n    }\n\n    useRender(() => (\n      <props.tag\n        ref={ intersectionRef }\n        class={[\n          'v-progress-linear',\n          {\n            'v-progress-linear--absolute': props.absolute,\n            'v-progress-linear--active': props.active && isIntersecting.value,\n            'v-progress-linear--reverse': isReversed.value,\n            'v-progress-linear--rounded': props.rounded,\n            'v-progress-linear--rounded-bar': props.roundedBar,\n            'v-progress-linear--striped': props.striped,\n          },\n          roundedClasses.value,\n          themeClasses.value,\n        ]}\n        style={{\n          bottom: props.location === 'bottom' ? 0 : undefined,\n          top: props.location === 'top' ? 0 : undefined,\n          height: props.active ? convertToUnit(height.value) : 0,\n          '--v-progress-linear-height': convertToUnit(height.value),\n          ...locationStyles.value,\n        }}\n        role=\"progressbar\"\n        aria-hidden={ props.active ? 'false' : 'true' }\n        aria-valuemin=\"0\"\n        aria-valuemax={ props.max }\n        aria-valuenow={ props.indeterminate ? undefined : normalizedValue.value }\n        onClick={ props.clickable && handleClick }\n      >\n        { props.stream && (\n          <div\n            key=\"stream\"\n            class={[\n              'v-progress-linear__stream',\n              textColorClasses.value,\n            ]}\n            style={{\n              ...textColorStyles.value,\n              [isReversed.value ? 'left' : 'right']: convertToUnit(-height.value),\n              borderTop: `${convertToUnit(height.value / 2)} dotted`,\n              opacity: opacity.value,\n              top: `calc(50% - ${convertToUnit(height.value / 4)})`,\n              width: convertToUnit(100 - normalizedBuffer.value, '%'),\n              '--v-progress-linear-stream-to': convertToUnit(height.value * (isReversed.value ? 1 : -1)),\n            }}\n          />\n        )}\n\n        <div\n          class={[\n            'v-progress-linear__background',\n            backgroundColorClasses.value,\n          ]}\n          style={[\n            backgroundColorStyles.value,\n            {\n              opacity: opacity.value,\n              width: convertToUnit((!props.stream ? 100 : normalizedBuffer.value), '%'),\n            },\n          ]}\n        />\n\n        <Transition name={ transition.value }>\n          { !props.indeterminate ? (\n            <div\n              class={[\n                'v-progress-linear__determinate',\n                barColorClasses.value,\n              ]}\n              style={[\n                barColorStyles.value,\n                { width: convertToUnit(normalizedValue.value, '%') },\n              ]}\n            />\n          ) : (\n            <div class=\"v-progress-linear__indeterminate\">\n              {['long', 'short'].map(bar => (\n                <div\n                  key={ bar }\n                  class={[\n                    'v-progress-linear__indeterminate',\n                    bar,\n                    barColorClasses.value,\n                  ]}\n                  style={ barColorStyles.value }\n                />\n              ))}\n            </div>\n          )}\n        </Transition>\n\n        { slots.default && (\n          <div class=\"v-progress-linear__content\">\n            { slots.default({ value: normalizedValue.value, buffer: normalizedBuffer.value }) }\n          </div>\n        )}\n      </props.tag>\n    ))\n\n    return {}\n  },\n})\n\nexport type VProgressLinear = InstanceType<typeof VProgressLinear>\n", "// Utilities\nimport { onBeforeUnmount, ref, watch } from 'vue'\nimport { SUPPORTS_INTERSECTION } from '@/util'\n\nexport function useIntersectionObserver (callback?: IntersectionObserverCallback) {\n  const intersectionRef = ref<HTMLElement>()\n  const isIntersecting = ref(false)\n\n  if (SUPPORTS_INTERSECTION) {\n    const observer = new IntersectionObserver((entries: IntersectionObserverEntry[]) => {\n      callback?.(entries, observer)\n\n      isIntersecting.value = !!entries.find(entry => entry.isIntersecting)\n    })\n\n    onBeforeUnmount(() => {\n      observer.disconnect()\n    })\n\n    watch(intersectionRef, (newValue, oldValue) => {\n      if (oldValue) {\n        observer.unobserve(oldValue)\n        isIntersecting.value = false\n      }\n\n      if (newValue) observer.observe(newValue)\n    }, {\n      flush: 'post',\n    })\n  }\n\n  return { intersectionRef, isIntersecting }\n}\n", "// Components\nimport { VProgressLinear } from '@/components/VProgressLinear'\n\n// Utilities\nimport { computed } from 'vue'\nimport { getCurrentInstanceName, propsFactory } from '@/util'\n\n// Types\nimport type { ExtractPropTypes, SetupContext } from 'vue'\nimport type { MakeSlots, SlotsToProps } from '@/util'\n\nexport interface LoaderSlotProps {\n  color: string | undefined\n  isActive: boolean\n}\n\nexport interface LoaderProps {\n  loading?: boolean | string\n}\n\n// Composables\nexport const makeLoaderProps = propsFactory({\n  loading: [Boolean, String],\n}, 'loader')\n\nexport function useLoader (\n  props: LoaderProps,\n  name = getCurrentInstanceName(),\n) {\n  const loaderClasses = computed(() => ({\n    [`${name}--loading`]: props.loading,\n  }))\n\n  return { loaderClasses }\n}\n\nexport function LoaderSlot (\n  props: {\n    active: boolean\n    name: string\n    color?: string\n  } & ExtractPropTypes<SlotsToProps<MakeSlots<{\n    default: [LoaderSlotProps]\n  }>>>,\n  { slots }: SetupContext,\n) {\n  return (\n    <div class={ `${props.name}__loader` }>\n      { slots.default?.({\n        color: props.color,\n        isActive: props.active,\n      } as LoaderSlotProps) || (\n        <VProgressLinear\n          active={ props.active }\n          color={ props.color }\n          height=\"2\"\n          indeterminate\n        />\n      )}\n    </div>\n  )\n}\n"],
  "mappings": "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",
  "names": ["useIntersectionObserver", "callback", "intersectionRef", "ref", "isIntersecting", "SUPPORTS_INTERSECTION", "observer", "IntersectionObserver", "entries", "value", "find", "entry", "onBeforeUnmount", "disconnect", "watch", "newValue", "oldValue", "unobserve", "observe", "flush", "VProgressLinear", "genericComponent", "name", "props", "absolute", "Boolean", "active", "type", "default", "bgColor", "String", "bgOpacity", "Number", "bufferValue", "clickable", "color", "height", "indeterminate", "max", "modelValue", "reverse", "stream", "striped", "roundedBar", "makeLocationProps", "location", "makeRoundedProps", "makeTagProps", "makeThemeProps", "emits", "value", "setup", "slots", "progress", "useProxiedModel", "isRtl", "useRtl", "themeClasses", "provideTheme", "locationStyles", "useLocation", "textColorClasses", "textColorStyles", "useTextColor", "backgroundColorClasses", "backgroundColorStyles", "useBackgroundColor", "computed", "barColorClasses", "barColorStyles", "roundedClasses", "useRounded", "intersectionRef", "isIntersecting", "useIntersectionObserver", "parseInt", "normalizedBuffer", "parseFloat", "normalizedValue", "isReversed", "transition", "opacity", "handleClick", "e", "left", "right", "width", "getBoundingClientRect", "clientX", "Math", "round", "useRender", "rounded", "bottom", "undefined", "top", "convertToUnit", "borderTop", "map", "bar", "buffer", "makeLoaderProps", "propsFactory", "loading", "Boolean", "String", "useLoader", "props", "name", "getCurrentInstanceName", "loaderClasses", "computed", "LoaderSlot", "slots", "default", "color", "isActive", "active"]
}
