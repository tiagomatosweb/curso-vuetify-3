{
  "version": 3,
  "sources": ["../../vuetify/src/components/VIcon/VIcon.tsx", "../../vuetify/src/composables/size.ts"],
  "sourcesContent": ["// Styles\nimport './VIcon.sass'\n\n// Composables\nimport { IconValue, useIcon } from '@/composables/icons'\nimport { makeSizeProps, useSize } from '@/composables/size'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useTextColor } from '@/composables/color'\n\n// Utilities\nimport { computed, Text, toRef } from 'vue'\nimport { convertToUnit, genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { ComputedRef } from 'vue'\n\nexport const makeVIconProps = propsFactory({\n  color: String,\n  start: Boolean,\n  end: Boolean,\n  icon: IconValue,\n\n  ...makeSizeProps(),\n  ...makeTagProps({ tag: 'i' }),\n  ...makeThemeProps(),\n}, 'v-icon')\n\nexport const VIcon = genericComponent()({\n  name: 'VIcon',\n\n  props: makeVIconProps(),\n\n  setup (props, { attrs, slots }) {\n    let slotIcon: ComputedRef<string | undefined> | undefined\n    if (slots.default) {\n      slotIcon = computed(() => {\n        const slot = slots.default?.()\n        if (!slot) return\n\n        return slot.filter(node =>\n          node.type === Text && node.children && typeof node.children === 'string'\n        )[0]?.children as string\n      })\n    }\n\n    const { themeClasses } = provideTheme(props)\n    const { iconData } = useIcon(slotIcon || props)\n    const { sizeClasses } = useSize(props)\n    const { textColorClasses, textColorStyles } = useTextColor(toRef(props, 'color'))\n\n    useRender(() => (\n      <iconData.value.component\n        tag={ props.tag }\n        icon={ iconData.value.icon }\n        class={[\n          'v-icon',\n          'notranslate',\n          themeClasses.value,\n          sizeClasses.value,\n          textColorClasses.value,\n          {\n            'v-icon--clickable': !!attrs.onClick,\n            'v-icon--start': props.start,\n            'v-icon--end': props.end,\n          },\n        ]}\n        style={[\n          !sizeClasses.value ? ({\n            fontSize: convertToUnit(props.size),\n            height: convertToUnit(props.size),\n            width: convertToUnit(props.size),\n          }) : undefined,\n          textColorStyles.value,\n        ]}\n        role={ attrs.onClick ? 'button' : undefined }\n        aria-hidden={ !attrs.onClick }\n      >\n        { slots.default?.() }\n      </iconData.value.component>\n    ))\n\n    return {}\n  },\n})\n\nexport type VIcon = InstanceType<typeof VIcon>\n", "// Utilities\nimport { convertToUnit, destructComputed, getCurrentInstanceName, includes, propsFactory } from '@/util'\n\n// Types\nconst predefinedSizes = ['x-small', 'small', 'default', 'large', 'x-large']\n\nexport interface SizeProps {\n  size?: string | number\n}\n\n// Composables\nexport const makeSizeProps = propsFactory({\n  size: {\n    type: [String, Number],\n    default: 'default',\n  },\n}, 'size')\n\nexport function useSize (\n  props: SizeProps,\n  name = getCurrentInstanceName(),\n) {\n  return destructComputed(() => {\n    let sizeClasses\n    let sizeStyles\n    if (includes(predefinedSizes, props.size)) {\n      sizeClasses = `${name}--size-${props.size}`\n    } else if (props.size) {\n      sizeStyles = {\n        width: convertToUnit(props.size),\n        height: convertToUnit(props.size),\n      }\n    }\n    return { sizeClasses, sizeStyles }\n  })\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAA;;;ACGA,IAAMA,kBAAkB,CAAC,WAAW,SAAS,WAAW,SAAS,SAAS;AAOnE,IAAMC,gBAAgBC,aAAa;EACxCC,MAAM;IACJC,MAAM,CAACC,QAAQC,MAAM;IACrBC,SAAS;EACX;AACF,GAAG,MAAM;AAEF,SAASC,QACdC,OAEA;AAAA,MADAC,OAAI,UAAA,SAAA,KAAA,UAAA,OAAA,SAAA,UAAA,KAAGC,uBAAsB;AAE7B,SAAOC,iBAAiB,MAAM;AAC5B,QAAIC;AACJ,QAAIC;AACJ,QAAIC,SAASf,iBAAiBS,MAAMN,IAAI,GAAG;AACzCU,oBAAe,GAAEH,cAAcD,MAAMN;IACvC,WAAWM,MAAMN,MAAM;AACrBW,mBAAa;QACXE,OAAOC,cAAcR,MAAMN,IAAI;QAC/Be,QAAQD,cAAcR,MAAMN,IAAI;MAClC;IACF;AACA,WAAO;MAAEU;MAAaC;IAAW;EACnC,CAAC;AACH;;;ADlBO,IAAMK,iBAAiBC,aAAa;EACzCC,OAAOC;EACPC,OAAOC;EACPC,KAAKD;EACLE,MAAMC;EAEN,GAAGC,cAAa;EAChB,GAAGC,aAAa;IAAEC,KAAK;EAAI,CAAC;EAC5B,GAAGC,eAAc;AACnB,GAAG,QAAQ;AAEJ,IAAMC,QAAQC,iBAAgB,EAAG;EACtCC,MAAM;EAENC,OAAOhB,eAAc;EAErBiB,MAAOD,OAAK,MAAoB;AAAA,QAAlB;MAAEE;MAAOC;IAAM,IAAC;AAC5B,QAAIC;AACJ,QAAID,MAAME,SAAS;AACjBD,iBAAWE,SAAS,MAAM;;AACxB,cAAMC,QAAOJ,WAAME,YAANF;AACb,YAAI,CAACI;AAAM;AAEX,gBAAOA,UAAKC,OAAOC,UACjBA,KAAKC,SAASC,QAAQF,KAAKG,YAAY,OAAOH,KAAKG,aAAa,QAAQ,EACxE,OAFKL,mBAEDK;MACR,CAAC;IACH;AAEA,UAAM;MAAEC;IAAa,IAAIC,aAAad,KAAK;AAC3C,UAAM;MAAEe;IAAS,IAAIC,QAAQZ,YAAYJ,KAAK;AAC9C,UAAM;MAAEiB;IAAY,IAAIC,QAAQlB,KAAK;AACrC,UAAM;MAAEmB;MAAkBC;IAAgB,IAAIC,aAAaC,MAAMtB,OAAO,OAAO,CAAC;AAEhFuB,cAAU,MAAA,YAAA,SAAA,MAAA,WAAA;MAAA,OAEAvB,MAAML;MAAG,QACRoB,SAASS,MAAMjC;MAAI,SACnB,CACL,UACA,eACAsB,aAAaW,OACbP,YAAYO,OACZL,iBAAiBK,OACjB;QACE,qBAAqB,CAAC,CAACtB,MAAMuB;QAC7B,iBAAiBzB,MAAMZ;QACvB,eAAeY,MAAMV;MACvB,CAAC;MACF,SACM,CACL,CAAC2B,YAAYO,QAAS;QACpBE,UAAUC,cAAc3B,MAAM4B,IAAI;QAClCC,QAAQF,cAAc3B,MAAM4B,IAAI;QAChCE,OAAOH,cAAc3B,MAAM4B,IAAI;MACjC,IAAKG,QACLX,gBAAgBI,KAAK;MACtB,QACMtB,MAAMuB,UAAU,WAAWM;MAAS,eAC7B,CAAC7B,MAAMuB;IAAO,GAAA;MAAA,SAAA,MAAA;;AAAA,iBAE1BtB,WAAME,YAANF,8BAAiB;;IAAA,CAAA,CAEtB;AAED,WAAO,CAAC;EACV;AACF,CAAC;",
  "names": ["predefinedSizes", "makeSizeProps", "propsFactory", "size", "type", "String", "Number", "default", "useSize", "props", "name", "getCurrentInstanceName", "destructComputed", "sizeClasses", "sizeStyles", "includes", "width", "convertToUnit", "height", "makeVIconProps", "propsFactory", "color", "String", "start", "Boolean", "end", "icon", "IconValue", "makeSizeProps", "makeTagProps", "tag", "makeThemeProps", "VIcon", "genericComponent", "name", "props", "setup", "attrs", "slots", "slotIcon", "default", "computed", "slot", "filter", "node", "type", "Text", "children", "themeClasses", "provideTheme", "iconData", "useIcon", "sizeClasses", "useSize", "textColorClasses", "textColorStyles", "useTextColor", "toRef", "useRender", "value", "onClick", "fontSize", "convertToUnit", "size", "height", "width", "undefined"]
}
