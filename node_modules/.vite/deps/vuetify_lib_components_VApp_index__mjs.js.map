{
  "version": 3,
  "sources": ["../../vuetify/src/components/VApp/VApp.tsx"],
  "sourcesContent": ["// Styles\nimport './VApp.sass'\n\n// Composables\nimport { createLayout, makeLayoutProps } from '@/composables/layout'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useRtl } from '@/composables/locale'\n\n// Utilities\nimport { genericComponent, useRender } from '@/util'\n\nexport const VApp = genericComponent()({\n  name: 'VApp',\n\n  props: {\n    ...makeLayoutProps({ fullHeight: true }),\n    ...makeThemeProps(),\n  },\n\n  setup (props, { slots }) {\n    const theme = provideTheme(props)\n    const { layoutClasses, layoutStyles, getLayoutItem, items, layoutRef } = createLayout(props)\n    const { rtlClasses } = useRtl()\n\n    useRender(() => (\n      <div\n        ref={ layoutRef }\n        class={[\n          'v-application',\n          theme.themeClasses.value,\n          layoutClasses.value,\n          rtlClasses.value,\n        ]}\n        style={ layoutStyles.value }\n      >\n        <div class=\"v-application__wrap\">\n          { slots.default?.() }\n        </div>\n      </div>\n    ))\n\n    return {\n      getLayoutItem,\n      items,\n      theme,\n    }\n  },\n})\n\nexport type VApp = InstanceType<typeof VApp>\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AACA,OAAA;AAUO,IAAMA,OAAOC,iBAAgB,EAAG;EACrCC,MAAM;EAENC,OAAO;IACL,GAAGC,gBAAgB;MAAEC,YAAY;IAAK,CAAC;IACvC,GAAGC,eAAc;EACnB;EAEAC,MAAOJ,OAAK,MAAa;AAAA,QAAX;MAAEK;IAAM,IAAC;AACrB,UAAMC,QAAQC,aAAaP,KAAK;AAChC,UAAM;MAAEQ;MAAeC;MAAcC;MAAeC;MAAOC;IAAU,IAAIC,aAAab,KAAK;AAC3F,UAAM;MAAEc;IAAW,IAAIC,OAAM;AAE7BC,cAAU,MAAA;;AAAA,yBAAA,OAAA;QAAA,OAEAJ;QAAS,SACR,CACL,iBACAN,MAAMW,aAAaC,OACnBV,cAAcU,OACdJ,WAAWI,KAAK;QACjB,SACOT,aAAaS;MAAK,GAAA,CAAA,YAAA,OAAA;QAAA,SAEf;MAAqB,GAAA,EAC5Bb,WAAMc,YAANd,8BAAiB,CAAA,CAAA,CAAA;KAGxB;AAED,WAAO;MACLK;MACAC;MACAL;IACF;EACF;AACF,CAAC;",
  "names": ["VApp", "genericComponent", "name", "props", "makeLayoutProps", "fullHeight", "makeThemeProps", "setup", "slots", "theme", "provideTheme", "layoutClasses", "layoutStyles", "getLayoutItem", "items", "layoutRef", "createLayout", "rtlClasses", "useRtl", "useRender", "themeClasses", "value", "default"]
}
