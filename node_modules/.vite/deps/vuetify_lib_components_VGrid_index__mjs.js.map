{
  "version": 3,
  "sources": ["../../vuetify/src/components/VGrid/VContainer.tsx", "../../vuetify/src/components/VGrid/VCol.ts", "../../vuetify/src/components/VGrid/VRow.ts", "../../vuetify/src/components/VGrid/VSpacer.ts"],
  "sourcesContent": ["// Styles\nimport './VGrid.sass'\n\n// Composables\nimport { makeTagProps } from '@/composables/tag'\n\n// Utilities\nimport { genericComponent, useRender } from '@/util'\n\nexport const VContainer = genericComponent()({\n  name: 'VContainer',\n\n  props: {\n    fluid: {\n      type: Boolean,\n      default: false,\n    },\n\n    ...makeTagProps(),\n  },\n\n  setup (props, { slots }) {\n    useRender(() => (\n      <props.tag\n        class={[\n          'v-container',\n          { 'v-container--fluid': props.fluid },\n        ]}\n        v-slots={ slots }\n      />\n    ))\n\n    return {}\n  },\n})\n\nexport type VContainer = InstanceType<typeof VContainer>\n", "// Styles\nimport './VGrid.sass'\n\n// Composables\nimport { makeTagProps } from '@/composables/tag'\n\n// Utilities\nimport { capitalize, computed, h } from 'vue'\nimport { genericComponent } from '@/util'\n\n// Types\nimport type { Prop, PropType } from 'vue'\n\nconst breakpoints = ['sm', 'md', 'lg', 'xl', 'xxl'] as const // no xs\n\nconst breakpointProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    props[val] = {\n      type: [Boolean, String, Number],\n      default: false,\n    }\n    return props\n  }, {} as Record<string, Prop<boolean | string | number, false>>)\n})()\n\nconst offsetProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    props['offset' + capitalize(val)] = {\n      type: [String, Number],\n      default: null,\n    }\n    return props\n  }, {} as Record<string, Prop<string | number, null>>)\n})()\n\nconst orderProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    props['order' + capitalize(val)] = {\n      type: [String, Number],\n      default: null,\n    }\n    return props\n  }, {} as Record<string, Prop<string | number, null>>)\n})()\n\nconst propMap = {\n  col: Object.keys(breakpointProps),\n  offset: Object.keys(offsetProps),\n  order: Object.keys(orderProps),\n}\n\nfunction breakpointClass (type: keyof typeof propMap, prop: string, val: boolean | string | number) {\n  let className: string = type\n  if (val == null || val === false) {\n    return undefined\n  }\n  if (prop) {\n    const breakpoint = prop.replace(type, '')\n    className += `-${breakpoint}`\n  }\n  if (type === 'col') {\n    className = 'v-' + className\n  }\n  // Handling the boolean style prop when accepting [Boolean, String, Number]\n  // means Vue will not convert <v-col sm></v-col> to sm: true for us.\n  // Since the default is false, an empty string indicates the prop's presence.\n  if (type === 'col' && (val === '' || val === true)) {\n    // .v-col-md\n    return className.toLowerCase()\n  }\n  // .order-md-6\n  className += `-${val}`\n  return className.toLowerCase()\n}\n\nconst ALIGN_SELF_VALUES = ['auto', 'start', 'end', 'center', 'baseline', 'stretch'] as const\n\nexport const VCol = genericComponent()({\n  name: 'VCol',\n\n  props: {\n    cols: {\n      type: [Boolean, String, Number],\n      default: false,\n    },\n    ...breakpointProps,\n    offset: {\n      type: [String, Number],\n      default: null,\n    },\n    ...offsetProps,\n    order: {\n      type: [String, Number],\n      default: null,\n    },\n    ...orderProps,\n    alignSelf: {\n      type: String as PropType<typeof ALIGN_SELF_VALUES[number]>,\n      default: null,\n      validator: (str: any) => ALIGN_SELF_VALUES.includes(str),\n    },\n\n    ...makeTagProps(),\n  },\n\n  setup (props, { slots }) {\n    const classes = computed(() => {\n      const classList: any[] = []\n\n      // Loop through `col`, `offset`, `order` breakpoint props\n      let type: keyof typeof propMap\n      for (type in propMap) {\n        propMap[type].forEach(prop => {\n          const value: string | number | boolean = (props as any)[prop]\n          const className = breakpointClass(type, prop, value)\n          if (className) classList!.push(className)\n        })\n      }\n\n      const hasColClasses = classList.some(className => className.startsWith('v-col-'))\n\n      classList.push({\n        // Default to .v-col if no other col-{bp}-* classes generated nor `cols` specified.\n        'v-col': !hasColClasses || !props.cols,\n        [`v-col-${props.cols}`]: props.cols,\n        [`offset-${props.offset}`]: props.offset,\n        [`order-${props.order}`]: props.order,\n        [`align-self-${props.alignSelf}`]: props.alignSelf,\n      })\n\n      return classList\n    })\n\n    return () => h(props.tag, {\n      class: classes.value,\n    }, slots.default?.())\n  },\n})\n\nexport type VCol = InstanceType<typeof VCol>\n", "// Styles\nimport './VGrid.sass'\n\n// Composables\nimport { makeTagProps } from '@/composables/tag'\n\n// Utilities\nimport { capitalize, computed, h } from 'vue'\nimport { genericComponent } from '@/util'\n\n// Types\nimport type { Prop, PropType } from 'vue'\n\nconst breakpoints = ['sm', 'md', 'lg', 'xl', 'xxl'] as const // no xs\n\nconst ALIGNMENT = ['start', 'end', 'center'] as const\n\nconst SPACE = ['space-between', 'space-around', 'space-evenly'] as const\n\nfunction makeRowProps <T> (prefix: string, def: () => Prop<T, null>) {\n  return breakpoints.reduce((props, val) => {\n    props[prefix + capitalize(val)] = def()\n    return props\n  }, {} as Record<string, Prop<T, null>>)\n}\n\nconst ALIGN_VALUES = [...ALIGNMENT, 'baseline', 'stretch'] as const\nconst alignValidator = (str: any) => ALIGN_VALUES.includes(str)\nconst alignProps = makeRowProps('align', () => ({\n  type: String as PropType<typeof ALIGN_VALUES[number]>,\n  default: null,\n  validator: alignValidator,\n}))\n\nconst JUSTIFY_VALUES = [...ALIGNMENT, ...SPACE] as const\nconst justifyValidator = (str: any) => JUSTIFY_VALUES.includes(str)\nconst justifyProps = makeRowProps('justify', () => ({\n  type: String as PropType<typeof JUSTIFY_VALUES[number]>,\n  default: null,\n  validator: justifyValidator,\n}))\n\nconst ALIGN_CONTENT_VALUES = [...ALIGNMENT, ...SPACE, 'stretch'] as const\nconst alignContentValidator = (str: any) => ALIGN_CONTENT_VALUES.includes(str)\nconst alignContentProps = makeRowProps('alignContent', () => ({\n  type: String as PropType<typeof ALIGN_CONTENT_VALUES[number]>,\n  default: null,\n  validator: alignContentValidator,\n}))\n\nconst propMap = {\n  align: Object.keys(alignProps),\n  justify: Object.keys(justifyProps),\n  alignContent: Object.keys(alignContentProps),\n}\n\nconst classMap = {\n  align: 'align',\n  justify: 'justify',\n  alignContent: 'align-content',\n}\n\nfunction breakpointClass (type: keyof typeof propMap, prop: string, val: string) {\n  let className = classMap[type]\n  if (val == null) {\n    return undefined\n  }\n  if (prop) {\n    // alignSm -> Sm\n    const breakpoint = prop.replace(type, '')\n    className += `-${breakpoint}`\n  }\n  // .align-items-sm-center\n  className += `-${val}`\n  return className.toLowerCase()\n}\n\nexport const VRow = genericComponent()({\n  name: 'VRow',\n\n  props: {\n    dense: Boolean,\n    noGutters: Boolean,\n    align: {\n      type: String as PropType<typeof ALIGN_VALUES[number]>,\n      default: null,\n      validator: alignValidator,\n    },\n    ...alignProps,\n    justify: {\n      type: String as PropType<typeof ALIGN_CONTENT_VALUES[number]>,\n      default: null,\n      validator: justifyValidator,\n    },\n    ...justifyProps,\n    alignContent: {\n      type: String as PropType<typeof ALIGN_CONTENT_VALUES[number]>,\n      default: null,\n      validator: alignContentValidator,\n    },\n\n    ...alignContentProps,\n    ...makeTagProps(),\n  },\n\n  setup (props, { slots }) {\n    const classes = computed(() => {\n      const classList: any[] = []\n\n      // Loop through `align`, `justify`, `alignContent` breakpoint props\n      let type: keyof typeof propMap\n      for (type in propMap) {\n        propMap[type].forEach(prop => {\n          const value: string = (props as any)[prop]\n          const className = breakpointClass(type, prop, value)\n          if (className) classList!.push(className)\n        })\n      }\n\n      classList.push({\n        'v-row--no-gutters': props.noGutters,\n        'v-row--dense': props.dense,\n        [`align-${props.align}`]: props.align,\n        [`justify-${props.justify}`]: props.justify,\n        [`align-content-${props.alignContent}`]: props.alignContent,\n      })\n\n      return classList\n    })\n\n    return () => h(props.tag, {\n      class: ['v-row', classes.value],\n    }, slots.default?.())\n  },\n})\n\nexport type VRow = InstanceType<typeof VRow>\n", "import { createSimpleFunctional } from '@/util'\n\nexport const VSpacer = createSimpleFunctional('flex-grow-1', 'div', 'VSpacer')\n\nexport type VSpacer = InstanceType<typeof VSpacer>\n"],
  "mappings": "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",
  "names": ["VContainer", "genericComponent", "name", "props", "fluid", "type", "Boolean", "default", "makeTagProps", "setup", "slots", "useRender", "breakpoints", "breakpointProps", "reduce", "props", "val", "type", "Boolean", "String", "Number", "default", "offsetProps", "capitalize", "orderProps", "propMap", "col", "Object", "keys", "offset", "order", "breakpointClass", "prop", "className", "undefined", "breakpoint", "replace", "toLowerCase", "ALIGN_SELF_VALUES", "VCol", "genericComponent", "name", "cols", "alignSelf", "validator", "str", "includes", "makeTagProps", "setup", "slots", "classes", "computed", "classList", "forEach", "value", "push", "hasColClasses", "some", "startsWith", "h", "tag", "class", "breakpoints", "ALIGNMENT", "SPACE", "makeRowProps", "prefix", "def", "reduce", "props", "val", "capitalize", "ALIGN_VALUES", "alignValidator", "str", "includes", "alignProps", "type", "String", "default", "validator", "JUSTIFY_VALUES", "justifyValidator", "justifyProps", "ALIGN_CONTENT_VALUES", "alignContentValidator", "alignContentProps", "propMap", "align", "Object", "keys", "justify", "alignContent", "classMap", "breakpointClass", "prop", "className", "undefined", "breakpoint", "replace", "toLowerCase", "VRow", "genericComponent", "name", "dense", "Boolean", "noGutters", "makeTagProps", "setup", "slots", "classes", "computed", "classList", "forEach", "value", "push", "h", "tag", "class", "VSpacer", "createSimpleFunctional"]
}
