{
  "version": 3,
  "sources": ["../../vuetify/src/composables/display.ts"],
  "sourcesContent": ["// Utilities\nimport { inject, reactive, ref, shallowRef, toRefs, watchEffect } from 'vue'\nimport { mergeDeep } from '@/util'\n\n// Globals\nimport { IN_BROWSER, SUPPORTS_TOUCH } from '@/util/globals'\n\n// Types\nimport type { InjectionKey, Ref } from 'vue'\n\nexport type DisplayBreakpoint = keyof DisplayThresholds\n\nexport interface DisplayThresholds {\n  xs: number\n  sm: number\n  md: number\n  lg: number\n  xl: number\n  xxl: number\n}\n\nexport interface DisplayOptions {\n  mobileBreakpoint?: number | DisplayBreakpoint\n  thresholds?: Partial<DisplayThresholds>\n}\n\nexport interface InternalDisplayOptions {\n  mobileBreakpoint: number | DisplayBreakpoint\n  thresholds: DisplayThresholds\n}\n\nexport interface DisplayPlatform {\n  android: boolean\n  ios: boolean\n  cordova: boolean\n  electron: boolean\n  chrome: boolean\n  edge: boolean\n  firefox: boolean\n  opera: boolean\n  win: boolean\n  mac: boolean\n  linux: boolean\n  touch: boolean\n  ssr: boolean\n}\n\nexport interface DisplayInstance {\n  xs: Ref<boolean>\n  sm: Ref<boolean>\n  md: Ref<boolean>\n  lg: Ref<boolean>\n  xl: Ref<boolean>\n  xxl: Ref<boolean>\n  smAndUp: Ref<boolean>\n  mdAndUp: Ref<boolean>\n  lgAndUp: Ref<boolean>\n  xlAndUp: Ref<boolean>\n  smAndDown: Ref<boolean>\n  mdAndDown: Ref<boolean>\n  lgAndDown: Ref<boolean>\n  xlAndDown: Ref<boolean>\n  name: Ref<DisplayBreakpoint>\n  height: Ref<number>\n  width: Ref<number>\n  mobile: Ref<boolean>\n  mobileBreakpoint: Ref<number | DisplayBreakpoint>\n  platform: Ref<DisplayPlatform>\n  thresholds: Ref<DisplayThresholds>\n\n  /** @internal */\n  ssr: boolean\n\n  update (): void\n}\n\nexport const DisplaySymbol: InjectionKey<DisplayInstance> = Symbol.for('vuetify:display')\n\nconst defaultDisplayOptions: DisplayOptions = {\n  mobileBreakpoint: 'lg',\n  thresholds: {\n    xs: 0,\n    sm: 600,\n    md: 960,\n    lg: 1280,\n    xl: 1920,\n    xxl: 2560,\n  },\n}\n\nconst parseDisplayOptions = (options: DisplayOptions = defaultDisplayOptions) => {\n  return mergeDeep(defaultDisplayOptions, options) as InternalDisplayOptions\n}\n\nfunction getClientWidth (isHydrate?: boolean) {\n  return IN_BROWSER && !isHydrate\n    ? window.innerWidth\n    : 0\n}\n\nfunction getClientHeight (isHydrate?: boolean) {\n  return IN_BROWSER && !isHydrate\n    ? window.innerHeight\n    : 0\n}\n\nfunction getPlatform (isHydrate?: boolean): DisplayPlatform {\n  const userAgent = IN_BROWSER && !isHydrate\n    ? window.navigator.userAgent\n    : 'ssr'\n\n  function match (regexp: RegExp) {\n    return Boolean(userAgent.match(regexp))\n  }\n\n  const android = match(/android/i)\n  const ios = match(/iphone|ipad|ipod/i)\n  const cordova = match(/cordova/i)\n  const electron = match(/electron/i)\n  const chrome = match(/chrome/i)\n  const edge = match(/edge/i)\n  const firefox = match(/firefox/i)\n  const opera = match(/opera/i)\n  const win = match(/win/i)\n  const mac = match(/mac/i)\n  const linux = match(/linux/i)\n\n  return {\n    android,\n    ios,\n    cordova,\n    electron,\n    chrome,\n    edge,\n    firefox,\n    opera,\n    win,\n    mac,\n    linux,\n    touch: SUPPORTS_TOUCH,\n    ssr: userAgent === 'ssr',\n  }\n}\n\nexport function createDisplay (options?: DisplayOptions, ssr?: boolean): DisplayInstance {\n  const { thresholds, mobileBreakpoint } = parseDisplayOptions(options)\n\n  const height = ref(getClientHeight(ssr))\n  const platform = shallowRef(getPlatform(ssr))\n  const state = reactive({} as DisplayInstance)\n  const width = ref(getClientWidth(ssr))\n\n  function updateSize () {\n    height.value = getClientHeight()\n    width.value = getClientWidth()\n  }\n  function update () {\n    updateSize()\n    platform.value = getPlatform()\n  }\n\n  // eslint-disable-next-line max-statements\n  watchEffect(() => {\n    const xs = width.value < thresholds.sm\n    const sm = width.value < thresholds.md && !xs\n    const md = width.value < thresholds.lg && !(sm || xs)\n    const lg = width.value < thresholds.xl && !(md || sm || xs)\n    const xl = width.value < thresholds.xxl && !(lg || md || sm || xs)\n    const xxl = width.value >= thresholds.xxl\n    const name =\n      xs ? 'xs'\n      : sm ? 'sm'\n      : md ? 'md'\n      : lg ? 'lg'\n      : xl ? 'xl'\n      : 'xxl'\n    const breakpointValue = typeof mobileBreakpoint === 'number' ? mobileBreakpoint : thresholds[mobileBreakpoint]\n    const mobile = width.value < breakpointValue\n\n    state.xs = xs\n    state.sm = sm\n    state.md = md\n    state.lg = lg\n    state.xl = xl\n    state.xxl = xxl\n    state.smAndUp = !xs\n    state.mdAndUp = !(xs || sm)\n    state.lgAndUp = !(xs || sm || md)\n    state.xlAndUp = !(xs || sm || md || lg)\n    state.smAndDown = !(md || lg || xl || xxl)\n    state.mdAndDown = !(lg || xl || xxl)\n    state.lgAndDown = !(xl || xxl)\n    state.xlAndDown = !xxl\n    state.name = name\n    state.height = height.value\n    state.width = width.value\n    state.mobile = mobile\n    state.mobileBreakpoint = mobileBreakpoint\n    state.platform = platform.value\n    state.thresholds = thresholds\n  })\n\n  if (IN_BROWSER) {\n    window.addEventListener('resize', updateSize, { passive: true })\n  }\n\n  return { ...toRefs(state), update, ssr: !!ssr }\n}\n\nexport function useDisplay () {\n  const display = inject(DisplaySymbol)\n\n  if (!display) throw new Error('Could not find Vuetify display injection')\n\n  return display\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;AA4EO,IAAMA,gBAA+CC,OAAOC,IAAI,iBAAiB;AAExF,IAAMC,wBAAwC;EAC5CC,kBAAkB;EAClBC,YAAY;IACVC,IAAI;IACJC,IAAI;IACJC,IAAI;IACJC,IAAI;IACJC,IAAI;IACJC,KAAK;EACP;AACF;AAEA,IAAMC,sBAAsB,WAAqD;AAAA,MAApDC,UAAuB,UAAA,SAAA,KAAA,UAAA,OAAA,SAAA,UAAA,KAAGV;AACrD,SAAOW,UAAUX,uBAAuBU,OAAO;AACjD;AAEA,SAASE,eAAgBC,WAAqB;AAC5C,SAAOC,cAAc,CAACD,YAClBE,OAAOC,aACP;AACN;AAEA,SAASC,gBAAiBJ,WAAqB;AAC7C,SAAOC,cAAc,CAACD,YAClBE,OAAOG,cACP;AACN;AAEA,SAASC,YAAaN,WAAsC;AAC1D,QAAMO,YAAYN,cAAc,CAACD,YAC7BE,OAAOM,UAAUD,YACjB;AAEJ,WAASE,MAAOC,QAAgB;AAC9B,WAAOC,QAAQJ,UAAUE,MAAMC,MAAM,CAAC;EACxC;AAEA,QAAME,UAAUH,MAAM,UAAU;AAChC,QAAMI,MAAMJ,MAAM,mBAAmB;AACrC,QAAMK,UAAUL,MAAM,UAAU;AAChC,QAAMM,WAAWN,MAAM,WAAW;AAClC,QAAMO,SAASP,MAAM,SAAS;AAC9B,QAAMQ,OAAOR,MAAM,OAAO;AAC1B,QAAMS,UAAUT,MAAM,UAAU;AAChC,QAAMU,QAAQV,MAAM,QAAQ;AAC5B,QAAMW,MAAMX,MAAM,MAAM;AACxB,QAAMY,MAAMZ,MAAM,MAAM;AACxB,QAAMa,QAAQb,MAAM,QAAQ;AAE5B,SAAO;IACLG;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC,OAAOC;IACPC,KAAKlB,cAAc;EACrB;AACF;AAEO,SAASmB,cAAe7B,SAA0B4B,KAAgC;AACvF,QAAM;IAAEpC;IAAYD;EAAiB,IAAIQ,oBAAoBC,OAAO;AAEpE,QAAM8B,SAASC,IAAIxB,gBAAgBqB,GAAG,CAAC;AACvC,QAAMI,WAAWC,WAAWxB,YAAYmB,GAAG,CAAC;AAC5C,QAAMM,QAAQC,SAAS,CAAC,CAAC;AACzB,QAAMC,QAAQL,IAAI7B,eAAe0B,GAAG,CAAC;AAErC,WAASS,aAAc;AACrBP,WAAOQ,QAAQ/B,gBAAe;AAC9B6B,UAAME,QAAQpC,eAAc;EAC9B;AACA,WAASqC,SAAU;AACjBF,eAAU;AACVL,aAASM,QAAQ7B,YAAW;EAC9B;AAGA+B,cAAY,MAAM;AAChB,UAAM/C,KAAK2C,MAAME,QAAQ9C,WAAWE;AACpC,UAAMA,KAAK0C,MAAME,QAAQ9C,WAAWG,MAAM,CAACF;AAC3C,UAAME,KAAKyC,MAAME,QAAQ9C,WAAWI,MAAM,EAAEF,MAAMD;AAClD,UAAMG,KAAKwC,MAAME,QAAQ9C,WAAWK,MAAM,EAAEF,MAAMD,MAAMD;AACxD,UAAMI,KAAKuC,MAAME,QAAQ9C,WAAWM,OAAO,EAAEF,MAAMD,MAAMD,MAAMD;AAC/D,UAAMK,MAAMsC,MAAME,SAAS9C,WAAWM;AACtC,UAAM2C,OACJhD,KAAK,OACHC,KAAK,OACLC,KAAK,OACLC,KAAK,OACLC,KAAK,OACL;AACJ,UAAM6C,kBAAkB,OAAOnD,qBAAqB,WAAWA,mBAAmBC,WAAWD;AAC7F,UAAMoD,SAASP,MAAME,QAAQI;AAE7BR,UAAMzC,KAAKA;AACXyC,UAAMxC,KAAKA;AACXwC,UAAMvC,KAAKA;AACXuC,UAAMtC,KAAKA;AACXsC,UAAMrC,KAAKA;AACXqC,UAAMpC,MAAMA;AACZoC,UAAMU,UAAU,CAACnD;AACjByC,UAAMW,UAAU,EAAEpD,MAAMC;AACxBwC,UAAMY,UAAU,EAAErD,MAAMC,MAAMC;AAC9BuC,UAAMa,UAAU,EAAEtD,MAAMC,MAAMC,MAAMC;AACpCsC,UAAMc,YAAY,EAAErD,MAAMC,MAAMC,MAAMC;AACtCoC,UAAMe,YAAY,EAAErD,MAAMC,MAAMC;AAChCoC,UAAMgB,YAAY,EAAErD,MAAMC;AAC1BoC,UAAMiB,YAAY,CAACrD;AACnBoC,UAAMO,OAAOA;AACbP,UAAMJ,SAASA,OAAOQ;AACtBJ,UAAME,QAAQA,MAAME;AACpBJ,UAAMS,SAASA;AACfT,UAAM3C,mBAAmBA;AACzB2C,UAAMF,WAAWA,SAASM;AAC1BJ,UAAM1C,aAAaA;EACrB,CAAC;AAED,MAAIY,YAAY;AACdC,WAAO+C,iBAAiB,UAAUf,YAAY;MAAEgB,SAAS;IAAK,CAAC;EACjE;AAEA,SAAO;IAAE,GAAGC,OAAOpB,KAAK;IAAGK;IAAQX,KAAK,CAAC,CAACA;EAAI;AAChD;AAEO,SAAS2B,aAAc;AAC5B,QAAMC,UAAUC,OAAOtE,aAAa;AAEpC,MAAI,CAACqE;AAAS,UAAM,IAAIE,MAAM,0CAA0C;AAExE,SAAOF;AACT;",
  "names": ["DisplaySymbol", "Symbol", "for", "defaultDisplayOptions", "mobileBreakpoint", "thresholds", "xs", "sm", "md", "lg", "xl", "xxl", "parseDisplayOptions", "options", "mergeDeep", "getClientWidth", "isHydrate", "IN_BROWSER", "window", "innerWidth", "getClientHeight", "innerHeight", "getPlatform", "userAgent", "navigator", "match", "regexp", "Boolean", "android", "ios", "cordova", "electron", "chrome", "edge", "firefox", "opera", "win", "mac", "linux", "touch", "SUPPORTS_TOUCH", "ssr", "createDisplay", "height", "ref", "platform", "shallowRef", "state", "reactive", "width", "updateSize", "value", "update", "watchEffect", "name", "breakpointValue", "mobile", "smAndUp", "mdAndUp", "lgAndUp", "xlAndUp", "smAndDown", "mdAndDown", "lgAndDown", "xlAndDown", "addEventListener", "passive", "toRefs", "useDisplay", "display", "inject", "Error"]
}
