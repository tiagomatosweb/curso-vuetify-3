{
  "version": 3,
  "sources": ["../../vuetify/src/iconsets/mdi.ts", "../../vuetify/src/composables/icons.tsx"],
  "sourcesContent": ["// Utilities\nimport { h } from 'vue'\n\n// Components\nimport { VClassIcon } from '@/composables/icons'\n\n// Types\nimport type { IconAliases, IconSet } from '@/composables/icons'\n\nconst aliases: IconAliases = {\n  collapse: 'mdi-chevron-up',\n  complete: 'mdi-check',\n  cancel: 'mdi-close-circle',\n  close: 'mdi-close',\n  delete: 'mdi-close-circle', // delete (e.g. v-chip close)\n  clear: 'mdi-close-circle',\n  success: 'mdi-check-circle',\n  info: 'mdi-information',\n  warning: 'mdi-alert-circle',\n  error: 'mdi-close-circle',\n  prev: 'mdi-chevron-left',\n  next: 'mdi-chevron-right',\n  checkboxOn: 'mdi-checkbox-marked',\n  checkboxOff: 'mdi-checkbox-blank-outline',\n  checkboxIndeterminate: 'mdi-minus-box',\n  delimiter: 'mdi-circle', // for carousel\n  sortAsc: 'mdi-arrow-up',\n  sortDesc: 'mdi-arrow-down',\n  expand: 'mdi-chevron-down',\n  menu: 'mdi-menu',\n  subgroup: 'mdi-menu-down',\n  dropdown: 'mdi-menu-down',\n  radioOn: 'mdi-radiobox-marked',\n  radioOff: 'mdi-radiobox-blank',\n  edit: 'mdi-pencil',\n  ratingEmpty: 'mdi-star-outline',\n  ratingFull: 'mdi-star',\n  ratingHalf: 'mdi-star-half-full',\n  loading: 'mdi-cached',\n  first: 'mdi-page-first',\n  last: 'mdi-page-last',\n  unfold: 'mdi-unfold-more-horizontal',\n  file: 'mdi-paperclip',\n  plus: 'mdi-plus',\n  minus: 'mdi-minus',\n}\n\nconst mdi: IconSet = {\n  // Not using mergeProps here, functional components merge props by default (?)\n  component: (props: any) => h(VClassIcon, { ...props, class: 'mdi' }),\n}\n\nexport { aliases, mdi }\n", "// Icons\nimport { aliases, mdi } from '@/iconsets/mdi'\n\n// Utilities\nimport { computed, inject, isRef } from 'vue'\nimport { defineComponent, genericComponent, mergeDeep, propsFactory } from '@/util'\n\n// Types\nimport type { InjectionKey, JSXComponent, PropType, Ref } from 'vue'\n\nexport type IconValue = string | JSXComponent\nexport const IconValue = [String, Function, Object] as PropType<IconValue>\n\nexport interface IconAliases {\n  [name: string]: IconValue\n  complete: IconValue\n  cancel: IconValue\n  close: IconValue\n  delete: IconValue\n  clear: IconValue\n  success: IconValue\n  info: IconValue\n  warning: IconValue\n  error: IconValue\n  prev: IconValue\n  next: IconValue\n  checkboxOn: IconValue\n  checkboxOff: IconValue\n  checkboxIndeterminate: IconValue\n  delimiter: IconValue\n  sortAsc: IconValue\n  sortDesc: IconValue\n  expand: IconValue\n  menu: IconValue\n  subgroup: IconValue\n  dropdown: IconValue\n  radioOn: IconValue\n  radioOff: IconValue\n  edit: IconValue\n  ratingEmpty: IconValue\n  ratingFull: IconValue\n  ratingHalf: IconValue\n  loading: IconValue\n  first: IconValue\n  last: IconValue\n  unfold: IconValue\n  file: IconValue\n  plus: IconValue\n  minus: IconValue\n}\n\nexport interface IconProps {\n  tag: string\n  icon?: IconValue\n  disabled?: Boolean\n}\n\ntype IconComponent = JSXComponent<IconProps>\n\nexport interface IconSet {\n  component: IconComponent\n}\n\nexport type IconOptions = {\n  defaultSet: string\n  aliases?: Partial<IconAliases>\n  sets: Record<string, IconSet>\n}\n\ntype IconInstance = {\n  component: IconComponent\n  icon?: IconValue\n}\n\nexport const IconSymbol: InjectionKey<IconOptions> = Symbol.for('vuetify:icons')\n\nexport const makeIconProps = propsFactory({\n  icon: {\n    type: IconValue,\n  },\n  // Could not remove this and use makeTagProps, types complained because it is not required\n  tag: {\n    type: String,\n    required: true,\n  },\n}, 'icon')\n\nexport const VComponentIcon = genericComponent()({\n  name: 'VComponentIcon',\n\n  props: makeIconProps(),\n\n  setup (props, { slots }) {\n    return () => {\n      return (\n        <props.tag>\n          { props.icon ? <props.icon /> : slots.default?.() }\n        </props.tag>\n      )\n    }\n  },\n})\nexport type VComponentIcon = InstanceType<typeof VComponentIcon>\n\nexport const VSvgIcon = defineComponent({\n  name: 'VSvgIcon',\n\n  inheritAttrs: false,\n\n  props: makeIconProps(),\n\n  setup (props, { attrs }) {\n    return () => {\n      return (\n        <props.tag { ...attrs } style={ null }>\n          <svg\n            class=\"v-icon__svg\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 24 24\"\n            role=\"img\"\n            aria-hidden=\"true\"\n          >\n            <path d={ props.icon as string }></path>\n          </svg>\n        </props.tag>\n      )\n    }\n  },\n})\nexport type VSvgIcon = InstanceType<typeof VSvgIcon>\n\nexport const VLigatureIcon = defineComponent({\n  name: 'VLigatureIcon',\n\n  props: makeIconProps(),\n\n  setup (props) {\n    return () => {\n      return <props.tag>{ props.icon }</props.tag>\n    }\n  },\n})\nexport type VLigatureIcon = InstanceType<typeof VLigatureIcon>\n\nexport const VClassIcon = defineComponent({\n  name: 'VClassIcon',\n\n  props: makeIconProps(),\n\n  setup (props) {\n    return () => {\n      return <props.tag class={ props.icon }></props.tag>\n    }\n  },\n})\nexport type VClassIcon = InstanceType<typeof VClassIcon>\n\nexport const defaultSets: Record<string, IconSet> = {\n  svg: {\n    component: VSvgIcon,\n  },\n  class: {\n    component: VClassIcon,\n  },\n}\n\n// Composables\nexport function createIcons (options?: IconOptions) {\n  return mergeDeep({\n    defaultSet: 'mdi',\n    sets: {\n      ...defaultSets,\n      mdi,\n    },\n    aliases,\n  }, options)\n}\n\nexport const useIcon = (props: Ref<string | undefined> | { icon?: IconValue }) => {\n  const icons = inject(IconSymbol)\n\n  if (!icons) throw new Error('Missing Vuetify Icons provide!')\n\n  const iconData: Ref<IconInstance> = computed(() => {\n    const iconAlias = isRef(props) ? props.value : props.icon\n\n    if (!iconAlias) return { component: VComponentIcon }\n\n    let icon: IconValue | undefined = iconAlias\n\n    if (typeof icon === 'string') {\n      icon = icon.trim()\n\n      if (icon.startsWith('$')) {\n        icon = icons.aliases?.[icon.slice(1)]\n      }\n    }\n\n    if (!icon) throw new Error(`Could not find aliased icon \"${iconAlias}\"`)\n\n    if (typeof icon !== 'string') {\n      return {\n        component: VComponentIcon,\n        icon,\n      }\n    }\n\n    const iconSetName = Object.keys(icons.sets).find(\n      setName => typeof icon === 'string' && icon.startsWith(`${setName}:`)\n    )\n\n    const iconName = iconSetName ? icon.slice(iconSetName.length + 1) : icon\n    const iconSet = icons.sets[iconSetName ?? icons.defaultSet]\n\n    return {\n      component: iconSet.component,\n      icon: iconName,\n    }\n  })\n\n  return { iconData }\n}\n"],
  "mappings": "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",
  "names": ["aliases", "collapse", "complete", "cancel", "close", "delete", "clear", "success", "info", "warning", "error", "prev", "next", "checkboxOn", "checkboxOff", "checkboxIndeterminate", "delimiter", "sortAsc", "sortDesc", "expand", "menu", "subgroup", "dropdown", "radioOn", "radioOff", "edit", "ratingEmpty", "ratingFull", "ratingHalf", "loading", "first", "last", "unfold", "file", "plus", "minus", "mdi", "component", "props", "h", "VClassIcon", "class", "IconValue", "String", "Function", "Object", "IconSymbol", "Symbol", "for", "makeIconProps", "propsFactory", "icon", "type", "tag", "required", "VComponentIcon", "genericComponent", "name", "props", "setup", "slots", "default", "VSvgIcon", "defineComponent", "inheritAttrs", "attrs", "VLigatureIcon", "VClassIcon", "defaultSets", "svg", "component", "class", "createIcons", "options", "mergeDeep", "defaultSet", "sets", "mdi", "aliases", "useIcon", "icons", "inject", "Error", "iconData", "computed", "iconAlias", "isRef", "value", "trim", "startsWith", "slice", "iconSetName", "keys", "find", "setName", "iconName", "length", "iconSet"]
}
