{
  "version": 3,
  "sources": ["../../vuetify/src/framework.ts"],
  "sourcesContent": ["// Composables\nimport { createDefaults, DefaultsSymbol } from '@/composables/defaults'\nimport { createDisplay, DisplaySymbol } from '@/composables/display'\nimport { createIcons, IconSymbol } from '@/composables/icons'\nimport { createLocale, LocaleSymbol } from '@/composables/locale'\nimport { createTheme, ThemeSymbol } from '@/composables/theme'\n\n// Utilities\nimport { defineComponent, getUid, IN_BROWSER, mergeDeep } from '@/util'\nimport { nextTick, reactive } from 'vue'\n\n// Types\nimport type { App, ComponentPublicInstance, InjectionKey } from 'vue'\nimport type { DefaultsOptions } from '@/composables/defaults'\nimport type { DisplayOptions } from '@/composables/display'\nimport type { IconOptions } from '@/composables/icons'\nimport type { LocaleOptions, RtlOptions } from '@/composables/locale'\nimport type { ThemeOptions } from '@/composables/theme'\n\nexport * from './composables'\n\nexport interface VuetifyOptions {\n  aliases?: Record<string, any>\n  blueprint?: Blueprint\n  components?: Record<string, any>\n  directives?: Record<string, any>\n  defaults?: DefaultsOptions\n  display?: DisplayOptions\n  theme?: ThemeOptions\n  icons?: IconOptions\n  locale?: LocaleOptions & RtlOptions\n  ssr?: boolean\n}\n\nexport interface Blueprint extends Omit<VuetifyOptions, 'blueprint'> {}\n\nexport function createVuetify (vuetify: VuetifyOptions = {}) {\n  const { blueprint, ...rest } = vuetify\n  const options = mergeDeep(blueprint, rest)\n  const {\n    aliases = {},\n    components = {},\n    directives = {},\n  } = options\n\n  const defaults = createDefaults(options.defaults)\n  const display = createDisplay(options.display, options.ssr)\n  const theme = createTheme(options.theme)\n  const icons = createIcons(options.icons)\n  const locale = createLocale(options.locale)\n\n  const install = (app: App) => {\n    for (const key in directives) {\n      app.directive(key, directives[key])\n    }\n\n    for (const key in components) {\n      app.component(key, components[key])\n    }\n\n    for (const key in aliases) {\n      app.component(key, defineComponent({\n        ...aliases[key],\n        name: key,\n        aliasName: aliases[key].name,\n      }))\n    }\n\n    theme.install(app)\n\n    app.provide(DefaultsSymbol, defaults)\n    app.provide(DisplaySymbol, display)\n    app.provide(ThemeSymbol, theme)\n    app.provide(IconSymbol, icons)\n    app.provide(LocaleSymbol, locale)\n\n    if (IN_BROWSER && options.ssr) {\n      if (app.$nuxt) {\n        app.$nuxt.hook('app:suspense:resolve', () => {\n          display.update()\n        })\n      } else {\n        const { mount } = app\n        app.mount = (...args) => {\n          const vm = mount(...args)\n          nextTick(() => display.update())\n          app.mount = mount\n          return vm\n        }\n      }\n    }\n\n    getUid.reset()\n\n    if (typeof __VUE_OPTIONS_API__ !== 'boolean' || __VUE_OPTIONS_API__) {\n      app.mixin({\n        computed: {\n          $vuetify () {\n            return reactive({\n              defaults: inject.call(this, DefaultsSymbol),\n              display: inject.call(this, DisplaySymbol),\n              theme: inject.call(this, ThemeSymbol),\n              icons: inject.call(this, IconSymbol),\n              locale: inject.call(this, LocaleSymbol),\n            })\n          },\n        },\n      })\n    }\n  }\n\n  return {\n    install,\n    defaults,\n    display,\n    theme,\n    icons,\n    locale,\n  }\n}\n\nexport const version = __VUETIFY_VERSION__\ncreateVuetify.version = version\n\n// Vue's inject() can only be used in setup\nfunction inject (this: ComponentPublicInstance, key: InjectionKey<any> | string) {\n  const vm = this.$\n\n  const provides = vm.parent?.provides ?? vm.vnode.appContext?.provides\n\n  if (provides && (key as any) in provides) {\n    return provides[(key as string)]\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCO,SAASA,gBAA6C;AAAA,MAA9BC,UAAuB,UAAA,SAAA,KAAA,UAAA,OAAA,SAAA,UAAA,KAAG,CAAC;AACxD,QAAM;IAAEC;OAAcC;EAAK,IAAIF;AAC/B,QAAMG,UAAUC,UAAUH,WAAWC,IAAI;AACzC,QAAM;IACJG,UAAU,CAAC;IACXC,aAAa,CAAC;IACdC,aAAa,CAAC;EAChB,IAAIJ;AAEJ,QAAMK,WAAWC,eAAeN,QAAQK,QAAQ;AAChD,QAAME,UAAUC,cAAcR,QAAQO,SAASP,QAAQS,GAAG;AAC1D,QAAMC,QAAQC,YAAYX,QAAQU,KAAK;AACvC,QAAME,QAAQC,YAAYb,QAAQY,KAAK;AACvC,QAAME,SAASC,aAAaf,QAAQc,MAAM;AAE1C,QAAME,UAAWC,SAAa;AAC5B,eAAWC,OAAOd,YAAY;AAC5Ba,UAAIE,UAAUD,KAAKd,WAAWc,IAAI;IACpC;AAEA,eAAWA,OAAOf,YAAY;AAC5Bc,UAAIG,UAAUF,KAAKf,WAAWe,IAAI;IACpC;AAEA,eAAWA,OAAOhB,SAAS;AACzBe,UAAIG,UAAUF,KAAKG,gBAAgB;QACjC,GAAGnB,QAAQgB;QACXI,MAAMJ;QACNK,WAAWrB,QAAQgB,KAAKI;MAC1B,CAAC,CAAC;IACJ;AAEAZ,UAAMM,QAAQC,GAAG;AAEjBA,QAAIO,QAAQC,gBAAgBpB,QAAQ;AACpCY,QAAIO,QAAQE,eAAenB,OAAO;AAClCU,QAAIO,QAAQG,aAAajB,KAAK;AAC9BO,QAAIO,QAAQI,YAAYhB,KAAK;AAC7BK,QAAIO,QAAQK,cAAcf,MAAM;AAEhC,QAAIgB,cAAc9B,QAAQS,KAAK;AAC7B,UAAIQ,IAAIc,OAAO;AACbd,YAAIc,MAAMC,KAAK,wBAAwB,MAAM;AAC3CzB,kBAAQ0B,OAAM;QAChB,CAAC;MACH,OAAO;AACL,cAAM;UAAEC;QAAM,IAAIjB;AAClBA,YAAIiB,QAAQ,WAAa;AACvB,gBAAMC,KAAKD,MAAM,GAAA,SAAO;AACxBE,mBAAS,MAAM7B,QAAQ0B,OAAM,CAAE;AAC/BhB,cAAIiB,QAAQA;AACZ,iBAAOC;QACT;MACF;IACF;AAEAE,WAAOC,MAAK;AAEZ,QAAI,OAAOC,wBAAwB,aAAaA,qBAAqB;AACnEtB,UAAIuB,MAAM;QACRC,UAAU;UACRC,WAAY;AACV,mBAAOC,SAAS;cACdtC,UAAUuC,OAAOC,KAAK,MAAMpB,cAAc;cAC1ClB,SAASqC,OAAOC,KAAK,MAAMnB,aAAa;cACxChB,OAAOkC,OAAOC,KAAK,MAAMlB,WAAW;cACpCf,OAAOgC,OAAOC,KAAK,MAAMjB,UAAU;cACnCd,QAAQ8B,OAAOC,KAAK,MAAMhB,YAAY;YACxC,CAAC;UACH;QACF;MACF,CAAC;IACH;EACF;AAEA,SAAO;IACLb;IACAX;IACAE;IACAG;IACAE;IACAE;EACF;AACF;AAEO,IAAMgC,UAAO;AACpBlD,cAAckD,UAAUA;AAGxB,SAASF,OAAuC1B,KAAiC;AA7HjF;AA8HE,QAAMiB,KAAK,KAAKY;AAEhB,QAAMC,YAAWb,cAAGc,WAAHd,mBAAWa,aAAXb,aAAuBA,QAAGe,MAAMC,eAAThB,mBAAqBa;AAE7D,MAAIA,YAAa9B,OAAe8B,UAAU;AACxC,WAAOA,SAAU9B;EACnB;AACF;",
  "names": ["createVuetify", "vuetify", "blueprint", "rest", "options", "mergeDeep", "aliases", "components", "directives", "defaults", "createDefaults", "display", "createDisplay", "ssr", "theme", "createTheme", "icons", "createIcons", "locale", "createLocale", "install", "app", "key", "directive", "component", "defineComponent", "name", "aliasName", "provide", "DefaultsSymbol", "DisplaySymbol", "ThemeSymbol", "IconSymbol", "LocaleSymbol", "IN_BROWSER", "$nuxt", "hook", "update", "mount", "vm", "nextTick", "getUid", "reset", "__VUE_OPTIONS_API__", "mixin", "computed", "$vuetify", "reactive", "inject", "call", "version", "$", "provides", "parent", "vnode", "appContext"]
}
